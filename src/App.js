import WalletConnectProvider from "@walletconnect/web3-provider";
import React, { useState, useEffect } from "react";
import './App.css';
import Web3 from 'web3';
import kickstarterTokenContract from "./build/contracts/KickstarterContractToken.json"
import kickstarterContract from "./build/contracts/KickstarterContract.json"
// Eth transaction sender
const EthereumTx = require('ethereumjs-tx').Transaction;
// Connection Initialization
// const rpcURL = "http://127.0.0.1:7545";

// setting web3 provider
const web3 = new Web3(window.ethereum);






//for init accounts of metamask
let accounts
function App() {

  useEffect(() => {
    
    // checking ethereum wallet installed or not
    // injecting web3 to webpage
    if (window.ethereum) {
    window.ethereum.on("accountsChanged", async function (accounts) {
    // document.location.reload();
    let acc = await web3.eth.getAccounts();
    console.log(acc);
  
    window.location.reload();
     }
     );
    //  checking network ID of injected ethereum net
    window.ethereum.on("networkChanged", function (networkId) {
    if (networkId !== 4) {
    console.log(networkId);
    alert("please Select the correct network");
    window.location.reload();
     } else {
    window.location.reload();
     }
     });
     }
     }, [window.ethereum]);

    
    // Function Call
    // this function will make 3 transaction from metamask
    // 1st for deploying token contract
    // 2nd for deploying crowdsale Contract
    // 3rd for adding crowdsale contract as minter in token contract 
    let deploy = async ()=>{

      //kickstarter token contract  ABI
      let kickstarterTokenContractAbi = JSON.stringify(kickstarterTokenContract.abi)

      // kickstarter token contract  byteCode
      let kickstarterTokenContracbytecode ='60806040523480156200001157600080fd5b5060405162001dee38038062001dee833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b5060405250505081816012620001d9620001cd6200023160201b60201c565b6200023960201b60201c565b8260049080519060200190620001f19291906200045e565b5081600590805190602001906200020a9291906200045e565b5080600660006101000a81548160ff021916908360ff16021790555050505050506200050d565b600033905090565b620002548160036200029a60201b6200156e1790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620002ac82826200037e60201b60201c565b1562000320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000407576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018062001dcc6022913960400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004a157805160ff1916838001178555620004d2565b82800160010185558215620004d2579182015b82811115620004d1578251825591602001919060010190620004b4565b5b509050620004e19190620004e5565b5090565b6200050a91905b8082111562000506576000816000905550600101620004ec565b5090565b90565b6118af806200051d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146104a0578063a9059cbb14610506578063aa271e1a1461056c578063dd62ed3e146105c8576100f5565b806370a082311461037757806395d89b41146103cf578063983b2d56146104525780639865027514610496576100f5565b806323b872dd116100d357806323b872dd14610201578063313ce5671461028757806339509351146102ab57806340c10f1914610311576100f5565b806306fdde03146100fa578063095ea7b31461017d57806318160ddd146101e3575b600080fd5b610102610640565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610142578082015181840152602081019050610127565b50505050905090810190601f16801561016f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101c96004803603604081101561019357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106e2565b604051808215151515815260200191505060405180910390f35b6101eb610700565b6040518082815260200191505060405180910390f35b61026d6004803603606081101561021757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061070a565b604051808215151515815260200191505060405180910390f35b61028f6107e3565b604051808260ff1660ff16815260200191505060405180910390f35b6102f7600480360360408110156102c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107fa565b604051808215151515815260200191505060405180910390f35b61035d6004803603604081101561032757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108ad565b604051808215151515815260200191505060405180910390f35b6103b96004803603602081101561038d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610928565b6040518082815260200191505060405180910390f35b6103d7610970565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104175780820151818401526020810190506103fc565b50505050905090810190601f1680156104445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104946004803603602081101561046857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a12565b005b61049e610a83565b005b6104ec600480360360408110156104b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a95565b604051808215151515815260200191505060405180910390f35b6105526004803603604081101561051c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b62565b604051808215151515815260200191505060405180910390f35b6105ae6004803603602081101561058257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b80565b604051808215151515815260200191505060405180910390f35b61062a600480360360408110156105de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b9d565b6040518082815260200191505060405180910390f35b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106d85780601f106106ad576101008083540402835291602001916106d8565b820191906000526020600020905b8154815290600101906020018083116106bb57829003601f168201915b5050505050905090565b60006106f66106ef610c24565b8484610c2c565b6001905092915050565b6000600254905090565b6000610717848484610e23565b6107d884610723610c24565b6107d3856040518060600160405280602881526020016117c360289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610789610c24565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110d99092919063ffffffff16565b610c2c565b600190509392505050565b6000600660009054906101000a900460ff16905090565b60006108a3610807610c24565b8461089e8560016000610818610c24565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119990919063ffffffff16565b610c2c565b6001905092915050565b60006108bf6108ba610c24565b610b80565b610914576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806117726030913960400191505060405180910390fd5b61091e8383611221565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a085780601f106109dd57610100808354040283529160200191610a08565b820191906000526020600020905b8154815290600101906020018083116109eb57829003601f168201915b5050505050905090565b610a22610a1d610c24565b610b80565b610a77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806117726030913960400191505060405180910390fd5b610a80816113dc565b50565b610a93610a8e610c24565b611436565b565b6000610b58610aa2610c24565b84610b53856040518060600160405280602581526020016118566025913960016000610acc610c24565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110d99092919063ffffffff16565b610c2c565b6001905092915050565b6000610b76610b6f610c24565b8484610e23565b6001905092915050565b6000610b9682600361149090919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cb2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806118326024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061172a6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ea9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061180d6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806117076023913960400191505060405180910390fd5b610f9a8160405180606001604052806026815260200161174c602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110d99092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061102d816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290611186576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561114b578082015181840152602081019050611130565b50505050905090810190601f1680156111785780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b6112d98160025461119990919063ffffffff16565b600281905550611330816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6113f081600361156e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61144a81600361164990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611517576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806117eb6022913960400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6115788282611490565b156115eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6116538282611490565b6116a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806117a26021913960400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365526f6c65733a206163636f756e7420697320746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a72315820fed2262356fd93b773f506ba8c9f3d28899ede06b565aa40bea6611748390c7a64736f6c63430005100032526f6c65733a206163636f756e7420697320746865207a65726f20616464726573730000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000074f7074696d75730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f50540000000000000000000000000000000000000000000000000000000000'


      // kickstarter contract  ABI
      let kickstarterContractAbi = JSON.stringify(kickstarterContract.abi)
      // kickstarter contract  Bytecode

      let kickstarterContracbytecode = '0x6080604052600436106100ec5760003560e01c8063521eb2731161008a578063b7a8807c11610059578063b7a8807c14610303578063bffa55d51461032e578063ec8ac4d814610357578063fc0c546a146103735761012c565b8063521eb273146102575780637d3d652214610282578063b2bdfa7b146102ad578063b3f05b97146102d85761012c565b80634042b66f116100c65780634042b66f146101bf57806347535d7b146101ea5780634b6753bc146102155780634bb278f3146102405761012c565b80631515bc2b1461013e5780632c4e722e1461016957806340193883146101945761012c565b3661012c577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f885258743334604051610122929190611074565b60405180910390a1005b61013c61013761039e565b6103a6565b005b34801561014a57600080fd5b506101536104f7565b604051610160919061109d565b60405180910390f35b34801561017557600080fd5b5061017e610503565b60405161018b9190611233565b60405180910390f35b3480156101a057600080fd5b506101a961050d565b6040516101b69190611233565b60405180910390f35b3480156101cb57600080fd5b506101d4610517565b6040516101e19190611233565b60405180910390f35b3480156101f657600080fd5b506101ff610521565b60405161020c919061109d565b60405180910390f35b34801561022157600080fd5b5061022a61053c565b6040516102379190611233565b60405180910390f35b34801561024c57600080fd5b50610255610546565b005b34801561026357600080fd5b5061026c6106c5565b6040516102799190611059565b60405180910390f35b34801561028e57600080fd5b506102976106ef565b6040516102a4919061109d565b60405180910390f35b3480156102b957600080fd5b506102c2610703565b6040516102cf9190611023565b60405180910390f35b3480156102e457600080fd5b506102ed610729565b6040516102fa919061109d565b60405180910390f35b34801561030f57600080fd5b50610318610740565b6040516103259190611233565b60405180910390f35b34801561033a57600080fd5b5061035560048036038101906103509190610dee565b61074a565b005b610371600480360381019061036c9190610dc1565b6103a6565b005b34801561037f57600080fd5b50610388610869565b60405161039591906110b8565b60405180910390f35b600033905090565b60008054906101000a900460ff166103f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ea906111f3565b60405180910390fd5b60008060006101000a81548160ff021916908315150217905550600034905061041c8282610892565b60006104278261094a565b905061043e8260035461096890919063ffffffff16565b60038190555061044e83826109c6565b8273ffffffffffffffffffffffffffffffffffffffff1661046d61039e565b73ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b84846040516104b492919061124e565b60405180910390a36104c683836109d4565b6104ce6109d8565b6104d883836109e2565b505060016000806101000a81548160ff02191690831515021790555050565b60006005544211905090565b6000600254905090565b6000600754905090565b6000600354905090565b6000600454421015801561053757506005544211155b905090565b6000600554905090565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661058761039e565b73ffffffffffffffffffffffffffffffffffffffff16146105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611113565b60405180910390fd5b600660009054906101000a900460ff161561062d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062490611153565b60405180910390fd5b6106356104f7565b610674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b906110f3565b60405180910390fd5b6001600660006101000a81548160ff0219169083151502179055506106976109e6565b7f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183660405160405180910390a1565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006007546106fc610517565b1015905090565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660009054906101000a900460ff16905090565b6000600454905090565b610752610729565b610791576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610788906111b3565b60405180910390fd5b6107996106ef565b156107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d090611173565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9826040518263ffffffff1660e01b81526004016108349190611059565b600060405180830381600087803b15801561084e57600080fd5b505af1158015610862573d6000803e3d6000fd5b5050505050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990611193565b60405180910390fd5b6000811415610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d90611213565b60405180910390fd5b5050565b600061096160025483610b8990919063ffffffff16565b9050919050565b60008082846109779190611288565b9050838110156109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b3906110d3565b60405180910390fd5b8091505092915050565b6109d08282610c04565b5050565b5050565b6109e0610c12565b565b5050565b6109ee6106ef565b15610afc57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343d726d66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a5d57600080fd5b505af1158015610a71573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639af6549a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b50505050610b7f565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c52dc416040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b6657600080fd5b505af1158015610b7a573d6000803e3d6000fd5b505050505b610b87610ca9565b565b600080831415610b9c5760009050610bfe565b60008284610baa919061130f565b9050828482610bb991906112de565b14610bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf090611133565b60405180910390fd5b809150505b92915050565b610c0e8282610cab565b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340fa0134610c5961039e565b6040518363ffffffff1660e01b8152600401610c75919061103e565b6000604051808303818588803b158015610c8e57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b5050505050565b565b610cb3610869565b73ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401610ced929190611074565b602060405180830381600087803b158015610d0757600080fd5b505af1158015610d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3f9190610e1b565b610d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d75906111d3565b60405180910390fd5b5050565b600081359050610d9181611727565b92915050565b600081359050610da68161173e565b92915050565b600081519050610dbb81611755565b92915050565b600060208284031215610dd757610dd661147b565b5b6000610de584828501610d82565b91505092915050565b600060208284031215610e0457610e0361147b565b5b6000610e1284828501610d97565b91505092915050565b600060208284031215610e3157610e3061147b565b5b6000610e3f84828501610dac565b91505092915050565b610e51816113c3565b82525050565b610e608161137b565b82525050565b610e6f81611369565b82525050565b610e7e8161138d565b82525050565b610e8d816113d5565b82525050565b6000610ea0601b83611277565b9150610eab82611480565b602082019050919050565b6000610ec3602083611277565b9150610ece826114a9565b602082019050919050565b6000610ee6602183611277565b9150610ef1826114d2565b604082019050919050565b6000610f09602183611277565b9150610f1482611521565b604082019050919050565b6000610f2c602783611277565b9150610f3782611570565b604082019050919050565b6000610f4f602183611277565b9150610f5a826115bf565b604082019050919050565b6000610f72602a83611277565b9150610f7d8261160e565b604082019050919050565b6000610f95602283611277565b9150610fa08261165d565b604082019050919050565b6000610fb8601f83611277565b9150610fc3826116ac565b602082019050919050565b6000610fdb601f83611277565b9150610fe6826116d5565b602082019050919050565b6000610ffe601983611277565b9150611009826116fe565b602082019050919050565b61101d816113b9565b82525050565b60006020820190506110386000830184610e66565b92915050565b60006020820190506110536000830184610e48565b92915050565b600060208201905061106e6000830184610e57565b92915050565b60006040820190506110896000830185610e66565b6110966020830184611014565b9392505050565b60006020820190506110b26000830184610e75565b92915050565b60006020820190506110cd6000830184610e84565b92915050565b600060208201905081810360008301526110ec81610e93565b9050919050565b6000602082019050818103600083015261110c81610eb6565b9050919050565b6000602082019050818103600083015261112c81610ed9565b9050919050565b6000602082019050818103600083015261114c81610efc565b9050919050565b6000602082019050818103600083015261116c81610f1f565b9050919050565b6000602082019050818103600083015261118c81610f42565b9050919050565b600060208201905081810360008301526111ac81610f65565b9050919050565b600060208201905081810360008301526111cc81610f88565b9050919050565b600060208201905081810360008301526111ec81610fab565b9050919050565b6000602082019050818103600083015261120c81610fce565b9050919050565b6000602082019050818103600083015261122c81610ff1565b9050919050565b60006020820190506112486000830184611014565b92915050565b60006040820190506112636000830185611014565b6112706020830184611014565b9392505050565b600082825260208201905092915050565b6000611293826113b9565b915061129e836113b9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112d3576112d261141d565b5b828201905092915050565b60006112e9826113b9565b91506112f4836113b9565b9250826113045761130361144c565b5b828204905092915050565b600061131a826113b9565b9150611325836113b9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561135e5761135d61141d565b5b828202905092915050565b600061137482611399565b9050919050565b600061138682611399565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006113ce826113f9565b9050919050565b60006113e0826113e7565b9050919050565b60006113f282611399565b9050919050565b60006114048261140b565b9050919050565b600061141682611399565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b7f46696e616c697a61626c6543726f776473616c653a206e6f7420636c6f736564600082015250565b7f6f776e65723a206f6e6c79206f776e65722063616e2066696e616c697a65206960008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b7f46696e616c697a61626c6543726f776473616c653a20616c726561647920666960008201527f6e616c697a656400000000000000000000000000000000000000000000000000602082015250565b7f526566756e6461626c6543726f776473616c653a20676f616c2072656163686560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f43726f776473616c653a2062656e656669636961727920697320746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f526566756e6461626c6543726f776473616c653a206e6f742066696e616c697a60008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e74656443726f776473616c653a206d696e74696e67206661696c656400600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f43726f776473616c653a20776569416d6f756e74206973203000000000000000600082015250565b61173081611369565b811461173b57600080fd5b50565b6117478161137b565b811461175257600080fd5b50565b61175e8161138d565b811461176957600080fd5b5056fea2646970667358221220365a4c97b0502003dd8952873a3a9bb9171803ab281aa0074cf2dc653d2de0e264736f6c63430008060033'
     
  
  // enabling ethereum
      await window.ethereum.enable();
      
// initializing web3 on given ethereum network by metamask
      const web3 = new Web3(window.ethereum);

      // getting metamask accounts
      accounts = await web3.eth.getAccounts();

      // debugging accounts
      console.log(accounts); 
      
      // initializing instance of token contract 
      let kickstarterContractAbiContract_deploy = new web3.eth.Contract(JSON.parse(kickstarterContractAbi));

            // initializing instance of kickstarter contract 
      let kickstarterTokenContractAbiContract_deploy = new web3.eth.Contract(JSON.parse(kickstarterTokenContractAbi));
      
      // Function Parameter + data = token contract bytecode
      // token deploying arguments are in array
      let kickstarterTokenContractPayload = await {
        data: kickstarterTokenContracbytecode,
        arguments: ['token', 'tk']
        
    }

    // parameters of transaction gass fee +  gas price + account from which contract will get deploy 
    let kickstarterTokenContractParameter = {
      from: accounts[0],
      gas: web3.utils.toHex(2100000),
      gasPrice: web3.utils.toHex(web3.utils.toWei('30', 'gwei'))
  }

  // deploying token contract
 await kickstarterTokenContractAbiContract_deploy.deploy(
  kickstarterTokenContractPayload
    
  // catching transaction hash of token contract
).send(kickstarterTokenContractParameter, async  (err, transactionHash) => {
    
  console.log('token Transaction Hash :', transactionHash);
  
  // catching instance of token contract
}).on('confirmation', () => {}).then(async (TokenNewContractInstance) => {

// debugging token contract address
  console.log('Deployed token Contract Address : ', TokenNewContractInstance.options.address);

  // Function Parameter + data = crowdsale contract bytecode
      // token deploying arguments are in array which arg1 = startingtime, arg2=ending time
      // arg3 = rate, arg4 = wallet address where owner want their money
      // arg5= token address want to give against funfing
      // arg6 = goal
      // arg7 = admin address for commission transfer
  let kickstarterContractPayload = await {
    data: kickstarterContracbytecode,
    arguments: [1627908909, 1627977309, 1000000, '0x420b99dA30a7123A646f1157414077Af4C9862Ee',
   
    TokenNewContractInstance.options.address, 10000, '0x420b99dA30a7123A646f1157414077Af4C9862Ee']
}

// saving token address in a variable
const tokenAddress = TokenNewContractInstance.options.address;


    // parameters of transaction gass fee +  gas price + account from which contract will get deploy 
let kickstarterContractParameter = {
    from: accounts[0],
    gas: web3.utils.toHex(210000),
    gasPrice: web3.utils.toHex(web3.utils.toWei('30', 'gwei'))
}

// deploying crowdsale contract
await kickstarterContractAbiContract_deploy.deploy(

  kickstarterContractPayload
  
).send(kickstarterContractParameter, async  (err, transactionHash) => {

  // debugging transaction hash
  console.log('Transaction Hash :', transactionHash);

  // taking instance of  crowdsale contract
}).on('confirmation', () => {}).then(async (newContractInstance)  => {

  
// making instance of token contract for sending a functiom

  const crowdFundToken = new web3.eth.Contract(kickstarterTokenContract.abi, TokenNewContractInstance.options.address);

    // sending add minter function to token contract
  // passing crowdsale address as params
  // so the crowdsale contract can mint tokens from token transaction

let result = await crowdFundToken.methods.addMinter

// pasing function params
// setting account address in sending params
(newContractInstance.options.address).send({from : accounts[0]})
// debugging response
console.log("minter is added",result)
// taking instance of crowdsale contract
  console.log('kickstarter Deployed Contract Address : ', newContractInstance.options.address);
})


})      
  }
  async function buyTokens() {

try {
  
  const web3 = new Web3(window.ethereum);

  // getting metamask accounts
  accounts = await web3.eth.getAccounts();

  // debugging accounts
  console.log(accounts); 

  // making instance of token contract for sending a functiom

  const crowdFundContract = new web3.eth.Contract(kickstarterContract.abi, '0x4757482Ba8BEb865893419A80bBcCb1d173b84c8');

  let result = await crowdFundContract.methods.buyTokens
  

  // setting account address in sending params who want to buy tokens
  (accounts[0]).send({
    from : accounts[0],
  value : 1000000000000,
  gas: web3.utils.toHex(210000),
  // gasPrice: web3.utils.toHex(web3.utils.toWei('30', 'gwei'))
  })
  // debugging response
  console.log("token buyed",result)
  
} catch (error) {
  console.log(error.message)
  
}



  }
  
  
  
    
  //MetaMask Connect
  const metamaskConnect = async () => {

    
      if (!window.ethereum) {
        alert("no metamask");
      } if(window.ethereum){
        try {
          
        
        await window.ethereum.enable();
        let acc = await web3.eth.getAccounts();



      // window.ethereum.on("networkChanged", async (networkId) => {
        
      //   if (networkId != 3) {

      //     console.log(networkId);
      //     alert(" hi please Select the binance testchain");

      //      }
       
      //      });
          } catch (error) {
          
          }


        const web3 = new Web3(window.ethereum);
       
        accounts = await web3.eth.getAccounts();
        console.log(accounts);
      }
      
      
    }



 //WalletConnect
 const walletConnect = async () => {
  const provider = new WalletConnectProvider({
    rpc: {
      // 1: "https://mainnet.mycustomnode.com",
      3: "https://ropsten.mycustomnode.com",
      // 100: "https://dai.poa.network",
      // ...
    },
  });
  //  Enable session (triggers QR Code modal)
  try {
    
    await provider.enable();
    const web3 = new Web3(provider);
    // Subscribe to accounts change
    provider.on("accountsChanged", (accounts) => {
      console.log(accounts);
    });
    // Subscribe to chainId change
    provider.on("chainChanged", (chainId) => {
      console.log(chainId);
    });
    // Subscribe to session disconnection
    provider.on("disconnect", (code, reason) => {
      console.log("reason=>>>>", code, reason);
    });
  } catch (error) {
    console.log("====", error);
  }
};
 return (
    <div className="App">
     <button onClick={metamaskConnect}>Metamask</button>
     <button onClick={walletConnect} >WalletConnect</button>\
     <button onClick={deploy} >Deploy Contract</button>
     <button onClick={buyTokens} >Donate</button>
   
     

    </div>
  );
}

export default App;
